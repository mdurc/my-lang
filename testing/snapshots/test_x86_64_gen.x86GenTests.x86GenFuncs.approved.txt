extern exit, string_length, print_string, print_char
extern print_newline, print_uint, print_int
extern read_char, read_word, parse_uint
extern parse_int, string_equals, string_copy
extern malloc, free, clrscr

default rel
global _start
section .text
_start:
	push rbp
	mov rbp, rsp
	push r12
	push r13
	push r14
	push r15
	push rbx
	mov r10, 3
	mov rdi, r10
	mov r11b, 1
	mov sil, r11b
	call _foo
	mov r12d, eax
	mov edi, r12d
	call print_int
	mov r13, LC0
	mov rdi, r13
	call print_string
	mov r14b, 1
	mov dil, r14b
	mov r15b, 1
	mov sil, r15b
	mov bl, 1
	mov dl, bl
	mov r10b, 1
	mov cl, r10b
	mov r11b, 1
	mov r8b, r11b
	mov r12b, 1
	mov r9b, r12b
	mov r13b, 1
	push r13
	mov r14b, 0
	push r14
	mov r15b, 1
	push r15
	mov bl, 0
	push rbx
	call _bar
	pop rbx
	pop r15
	pop r14
	pop r13
	pop r12
	mov rsp, rbp ; restore stack
	pop rbp
	xor rdi, rdi
	call exit
_foo:
	push rbp
	mov rbp, rsp
	sub rsp, 16
	push r12
	push r13
	push r14
	push r15
	push rbx
	mov DWORD[rbp - 4], edi
	mov BYTE[rbp - 5], sil
	mov r10, 13
	mov r11d, DWORD[rbp - 4]
	add r11d, r10d
	mov DWORD[rbp - 9], r11d
	mov r12, 1
	mov DWORD[rbp - 13], r12d
	mov r13b, BYTE[rbp - 5]
	test BYTE[rbp - 5], r13b
	jz _L0
	mov r14, 2
	mov r15d, DWORD[rbp - 9]
	imul r15d, r14d
	mov DWORD[rbp - 13], r15d
_L0:
	mov rbx, 5
	mov r10d, DWORD[rbp - 13]
	imul r10d, ebx
	mov DWORD[rbp - 13], r10d
	pop rbx
	pop r15
	pop r14
	pop r13
	pop r12
	mov eax, DWORD[rbp - 13] ; return value
	mov rsp, rbp ; restore stack
	pop rbp
	ret
_bar:
	push rbp
	mov rbp, rsp
	sub rsp, 16
	push r12
	push r13
	push r14
	push r15
	push rbx
	mov BYTE[rbp - 1], dil
	mov BYTE[rbp - 2], sil
	mov BYTE[rbp - 3], dl
	mov BYTE[rbp - 4], cl
	mov BYTE[rbp - 5], r8b
	mov BYTE[rbp - 6], r9b
	mov r10b, BYTE[rbp + 40]
	mov BYTE[rbp - 7], r10b
	mov r11b, BYTE[rbp + 32]
	mov BYTE[rbp - 8], r11b
	mov r12b, BYTE[rbp + 24]
	mov BYTE[rbp - 9], r12b
	mov r13b, BYTE[rbp + 16]
	mov BYTE[rbp - 10], r13b
	mov dil, BYTE[rbp - 7]
	call print_int
	mov r14, LC0
	mov rdi, r14
	call print_string
	mov dil, BYTE[rbp - 8]
	call print_int
	mov r15, LC0
	mov rdi, r15
	call print_string
	mov dil, BYTE[rbp - 9]
	call print_int
	mov rbx, LC0
	mov rdi, rbx
	call print_string
	mov dil, BYTE[rbp - 10]
	call print_int
	mov r10, LC0
	mov rdi, r10
	call print_string
	pop rbx
	pop r15
	pop r14
	pop r13
	pop r12
	xor rax, rax ; void return
	mov rsp, rbp ; restore stack
	pop rbp
	ret

section .data
LC0:
	db 10, 0
