FunctionDecl(
  Name:
    Ident(foo),
  Params: [
    Param(Modifier: ImmutablyBorrowed,
      Name:
        Ident(x),
      Type:
        {i32} Type::Named(i32)
    )
  ],
  ReturnType:
    {u0} Type::Named(u0),
  Body:
  Block([
  ])
)
VariableDecl(Mutable: false,
  Name:
    Ident(p_foo),
  Type:
    {func(i32)->u0} Type::Function(
      Params: [
        Type:
          {i32} Type::Named(i32)
        )
      ],
      Return Type:
        {u0} Type::Named(u0)
    )
  Initializer:
    Ident(foo)
)
ExpressionStmt(
  FunctionCall(
    Callee:
      Ident(foo),
    Arguments: [
      Argument(IsGive: false,
        Int(1)
      )
    ]
  )
)
ExpressionStmt(
  FunctionCall(
    Callee:
      Ident(p_foo),
    Arguments: [
      Argument(IsGive: false,
        Int(2)
      )
    ]
  )
)
VariableDecl(Mutable: true,
  Name:
    Ident(x),
  Type:
    {i64} Type::Named(i64)
  Initializer:
    Int(3)
)
VariableDecl(Mutable: true,
  Name:
    Ident(px),
  Type:
    {ptr<imm i64>} Type::Pointer(pointee mutable: false,
      Pointee:
        {i64} Type::Named(i64)
    )
  Initializer:
    UnaryOp(&,
      Ident(x)
    )
)
VariableDecl(Mutable: true,
  Name:
    Ident(py),
  Type:
    {ptr<mut i64>} Type::Pointer(pointee mutable: true,
      Pointee:
        {i64} Type::Named(i64)
    )
  Initializer:
    UnaryOp(&mut,
      Ident(x)
    )
)
ExpressionStmt(
  Assignment(
    LValue:
      UnaryOp(*,
        Ident(py)
      ),
    RValue:
      Int(15)
  )
)
ExpressionStmt(
  Assignment(
    LValue:
      Ident(px),
    RValue:
      null
  )
)
ExpressionStmt(
  Assignment(
    LValue:
      Ident(px),
    RValue:
      UnaryOp(&,
        Ident(x)
      )
  )
)
VariableDecl(Mutable: true,
  Name:
    Ident(pz),
  Type:
    {ptr<imm i64>} Type::Pointer(pointee mutable: false,
      Pointee:
        {i64} Type::Named(i64)
    )
  Initializer: null
)
ExpressionStmt(
  Assignment(
    LValue:
      Ident(pz),
    RValue:
      NewExpr(
        TypeToAllocate:(mutable memory, type: array)
          {i64} Type::Named(i64)
        AllocationSpecifier:
          Int(3)
      )
  )
)
ExpressionStmt(
  Assignment(
    LValue:
      ArrayIndex(
        Object:
          Ident(pz),
        Index:
          Int(0)
      ),
    RValue:
      Int(30)
  )
)
ExpressionStmt(
  Assignment(
    LValue:
      ArrayIndex(
        Object:
          Ident(pz),
        Index:
          Int(1)
      ),
    RValue:
      Int(60)
  )
)
ExpressionStmt(
  Assignment(
    LValue:
      ArrayIndex(
        Object:
          Ident(pz),
        Index:
          Int(2)
      ),
    RValue:
      Int(90)
  )
)
FreeStmt(IsArray: true,
  Ident(pz)
)
ExpressionStmt(
  Assignment(
    LValue:
      Ident(pz),
    RValue:
      null
  )
)
ExpressionStmt(
  Assignment(
    LValue:
      Ident(pz),
    RValue:
      NewExpr(
        TypeToAllocate:(immutable memory, type: constructor)
          {i64} Type::Named(i64)
        AllocationSpecifier:
          Int(32)
      )
  )
)
FreeStmt(IsArray: false,
  Ident(pz)
)
