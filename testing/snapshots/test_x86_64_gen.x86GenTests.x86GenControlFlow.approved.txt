extern exit, string_length, print_string, print_char
extern print_newline, print_uint, print_int
extern read_char, read_word, parse_uint
extern parse_int, string_equals, string_copy
extern memcpy, malloc, free, clrscr

default rel
global _start
section .text
_start:
	push rbp
	mov rbp, rsp
	sub rsp, 48
	push rbx ; saving callee-saved register
	push r12 ; saving callee-saved register
	push r13 ; saving callee-saved register
	push r14 ; saving callee-saved register
	push r15 ; saving callee-saved register
	mov r10b, 1
	mov BYTE[global_vars + 1], r10b
	mov r11b, BYTE[global_vars + 1]
	test BYTE[global_vars + 1], r11b
	jz _L0
	jmp _L1
_L0:
_L1:
_L2:
	mov r12b, 1
	test r12b, r12b
	jz _L3
	jmp _L3
	jmp _L2
_L3:
	mov r13, 0
	mov QWORD[global_vars + 9], r13
_L4:
	mov r14, 10
	push rax
	cmp QWORD[global_vars + 9], r14
	setl al
	movzx r15, al
	pop rax
	test r15b, r15b
	jz _L7
_L6:
	jmp _L5
_L5:
	mov rbx, 1
	mov QWORD[rbp - 8], r10 ; spilling register r10 to stack
	mov r10, QWORD[global_vars + 9]
	add r10, rbx
	mov QWORD[global_vars + 9], r10
	jmp _L4
_L7:
	mov r11, 5
	mov DWORD[global_vars + 13], r11d
	mov QWORD[rbp - 16], r12 ; spilling register r12 to stack
	mov r12, 3
	mov QWORD[rbp - 24], r13 ; spilling register r13 to stack
	push rax
	cmp DWORD[global_vars + 13], r12d
	setne al
	movzx r13d, al
	pop rax
	test r13d, r13d
	jz _L8
	jmp _L9
_L8:
	mov QWORD[rbp - 32], r14 ; spilling register r14 to stack
	mov r14, 2
	mov QWORD[global_vars + 21], r14
	jmp _L9
_L9:
	mov QWORD[rbp - 40], r15 ; spilling register r15 to stack
	mov r15, 3
	mov QWORD[global_vars + 29], r15
	pop r15 ; restoring callee-saved register
	pop r14 ; restoring callee-saved register
	pop r13 ; restoring callee-saved register
	pop r12 ; restoring callee-saved register
	pop rbx ; restoring callee-saved register
	mov rsp, rbp ; restore stack
	pop rbp
	xor rdi, rdi
	call exit

section .data
section .bss
	global_vars resb 32
