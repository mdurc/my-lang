extern exit, string_length, print_string, print_char
extern print_newline, print_uint, print_int
extern read_char, read_word, parse_uint
extern parse_int, string_equals, string_copy

default rel
global _start
section .text
_start:
	push rbp
	mov rbp, rsp
	push r12
	push r13
	push r14
	push r15
	push rbx
	mov r10, 0
	mov QWORD[global_vars + 8], r10
_L0:
	mov r11, 10
	push rax
	cmp QWORD[global_vars + 8], r11
	setl al
	movzx r12, al
	pop rax
	test r12b, r12b
	jz _L1
	mov rdi, QWORD[global_vars + 8]
	call print_int
	mov r13, 1
	mov r14, QWORD[global_vars + 8]
	add r14, r13
	mov QWORD[global_vars + 8], r14
	mov r15, 5
	push rax
	cmp QWORD[global_vars + 8], r15
	sete al
	movzx rbx, al
	pop rax
	test bl, bl
	jz _L2
	jmp _L1
_L2:
	mov r10, 3
	push rax
	cmp QWORD[global_vars + 8], r10
	sete al
	movzx r11, al
	pop rax
	test r11b, r11b
	jz _L4
	jmp _L0
	mov r12, 18
	mov rdi, r12
	call print_int
	jmp _L5
_L4:
	mov r13, LC0
	mov rdi, r13
	call print_string
_L5:
	jmp _L0
_L1:
	mov r14, 5
	mov DWORD[global_vars + 12], r14d
_L6:
	mov r15, 10
	push rax
	cmp DWORD[global_vars + 12], r15d
	setl al
	movzx ebx, al
	pop rax
	test bl, bl
	jz _L9
_L8:
	mov edi, DWORD[global_vars + 12]
	call print_int
	jmp _L7
	mov edi, DWORD[global_vars + 12]
	call print_int
_L7:
	mov r10, 1
	mov r11d, DWORD[global_vars + 12]
	add r11d, r10d
	mov DWORD[global_vars + 12], r11d
	jmp _L6
_L9:
	pop rbx
	pop r15
	pop r14
	pop r13
	pop r12
	mov rsp, rbp ; restore stack
	pop rbp
	xor rdi, rdi
	call exit

section .data
LC0:
	db "ok", 0
section .bss
	global_vars resb 16
