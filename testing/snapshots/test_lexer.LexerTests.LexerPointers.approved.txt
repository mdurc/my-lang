Tokens (306):
[FUNC          ] func                        at (row=1, col=1-5)
[IDENTIFIER    ] foo                         at (row=1, col=6-9)
[LPAREN        ] (                           at (row=1, col=9-10)
[IDENTIFIER    ] x                           at (row=1, col=10-11)
[COLON         ] :                           at (row=1, col=11-12)
[I32           ] i32                         at (row=1, col=13-16)
[COMMA         ] ,                           at (row=1, col=16-17)
[IDENTIFIER    ] y                           at (row=1, col=18-19)
[COLON         ] :                           at (row=1, col=19-20)
[I32           ] i32                         at (row=1, col=21-24)
[COMMA         ] ,                           at (row=1, col=24-25)
[IDENTIFIER    ] z                           at (row=1, col=26-27)
[COLON         ] :                           at (row=1, col=27-28)
[I32           ] i32                         at (row=1, col=29-32)
[RPAREN        ] )                           at (row=1, col=32-33)
[LBRACE        ] {                           at (row=1, col=34-35)
[PRINT         ] print                       at (row=2, col=3-8)
[STRING_LITERAL] "Running foo_1\n"Running foo_1
at (row=2, col=9-26)
[SEMICOLON     ] ;                           at (row=2, col=26-27)
[PRINT         ] print                       at (row=3, col=3-8)
[IDENTIFIER    ] x                           at (row=3, col=9-10)
[COMMA         ] ,                           at (row=3, col=10-11)
[STRING_LITERAL] "\n"          
             at (row=3, col=12-16)
[SEMICOLON     ] ;                           at (row=3, col=16-17)
[PRINT         ] print                       at (row=4, col=3-8)
[IDENTIFIER    ] y                           at (row=4, col=9-10)
[COMMA         ] ,                           at (row=4, col=10-11)
[STRING_LITERAL] "\n"          
             at (row=4, col=12-16)
[SEMICOLON     ] ;                           at (row=4, col=16-17)
[PRINT         ] print                       at (row=5, col=3-8)
[IDENTIFIER    ] z                           at (row=5, col=9-10)
[COMMA         ] ,                           at (row=5, col=10-11)
[STRING_LITERAL] "\n"          
             at (row=5, col=12-16)
[SEMICOLON     ] ;                           at (row=5, col=16-17)
[RBRACE        ] }                           at (row=6, col=1-2)
[IDENTIFIER    ] p_foo                       at (row=9, col=1-6)
[COLON         ] :                           at (row=9, col=7-8)
[FUNC          ] func                        at (row=9, col=9-13)
[LPAREN        ] (                           at (row=9, col=13-14)
[I32           ] i32                         at (row=9, col=14-17)
[COMMA         ] ,                           at (row=9, col=17-18)
[I32           ] i32                         at (row=9, col=19-22)
[COMMA         ] ,                           at (row=9, col=22-23)
[I32           ] i32                         at (row=9, col=24-27)
[RPAREN        ] )                           at (row=9, col=27-28)
[ARROW         ] ->                          at (row=9, col=28-30)
[U0            ] u0                          at (row=9, col=30-32)
[EQUAL         ] =                           at (row=9, col=33-34)
[IDENTIFIER    ] foo                         at (row=9, col=35-38)
[SEMICOLON     ] ;                           at (row=9, col=38-39)
[IDENTIFIER    ] foo                         at (row=11, col=1-4)
[LPAREN        ] (                           at (row=11, col=4-5)
[INT_LITERAL   ] 1             1             at (row=11, col=5-6)
[COMMA         ] ,                           at (row=11, col=6-7)
[INT_LITERAL   ] 2             2             at (row=11, col=8-9)
[COMMA         ] ,                           at (row=11, col=9-10)
[INT_LITERAL   ] 3             3             at (row=11, col=11-12)
[RPAREN        ] )                           at (row=11, col=12-13)
[SEMICOLON     ] ;                           at (row=11, col=13-14)
[IDENTIFIER    ] p_foo                       at (row=12, col=1-6)
[LPAREN        ] (                           at (row=12, col=6-7)
[INT_LITERAL   ] 4             4             at (row=12, col=7-8)
[COMMA         ] ,                           at (row=12, col=8-9)
[INT_LITERAL   ] 5             5             at (row=12, col=10-11)
[COMMA         ] ,                           at (row=12, col=11-12)
[INT_LITERAL   ] 6             6             at (row=12, col=13-14)
[RPAREN        ] )                           at (row=12, col=14-15)
[SEMICOLON     ] ;                           at (row=12, col=15-16)
[MUT           ] mut                         at (row=16, col=1-4)
[IDENTIFIER    ] x                           at (row=16, col=5-6)
[COLON         ] :                           at (row=16, col=7-8)
[I64           ] i64                         at (row=16, col=9-12)
[EQUAL         ] =                           at (row=16, col=13-14)
[INT_LITERAL   ] 3             3             at (row=16, col=15-16)
[SEMICOLON     ] ;                           at (row=16, col=16-17)
[MUT           ] mut                         at (row=17, col=1-4)
[IDENTIFIER    ] px                          at (row=17, col=5-7)
[COLON         ] :                           at (row=17, col=8-9)
[PTR           ] ptr                         at (row=17, col=10-13)
[LANGLE        ] <                           at (row=17, col=13-14)
[IMM           ] imm                         at (row=17, col=14-17)
[I64           ] i64                         at (row=17, col=18-21)
[RANGLE        ] >                           at (row=17, col=21-22)
[EQUAL         ] =                           at (row=17, col=23-24)
[AMPERSAND     ] &                           at (row=17, col=25-26)
[IDENTIFIER    ] x                           at (row=17, col=26-27)
[SEMICOLON     ] ;                           at (row=17, col=27-28)
[PRINT         ] print                       at (row=18, col=1-6)
[STRING_LITERAL] "[*px, x] = " [*px, x] =    at (row=18, col=7-20)
[COMMA         ] ,                           at (row=18, col=20-21)
[STAR          ] *                           at (row=18, col=22-23)
[IDENTIFIER    ] px                          at (row=18, col=23-25)
[COMMA         ] ,                           at (row=18, col=25-26)
[STRING_LITERAL] ", "          ,             at (row=18, col=27-31)
[COMMA         ] ,                           at (row=18, col=31-32)
[IDENTIFIER    ] x                           at (row=18, col=33-34)
[COMMA         ] ,                           at (row=18, col=34-35)
[STRING_LITERAL] "\n"          
             at (row=18, col=36-40)
[SEMICOLON     ] ;                           at (row=18, col=40-41)
[MUT           ] mut                         at (row=20, col=1-4)
[IDENTIFIER    ] py                          at (row=20, col=5-7)
[COLON         ] :                           at (row=20, col=8-9)
[PTR           ] ptr                         at (row=20, col=10-13)
[LANGLE        ] <                           at (row=20, col=13-14)
[MUT           ] mut                         at (row=20, col=14-17)
[I64           ] i64                         at (row=20, col=18-21)
[RANGLE        ] >                           at (row=20, col=21-22)
[EQUAL         ] =                           at (row=20, col=23-24)
[AMPERSAND     ] &                           at (row=20, col=25-26)
[MUT           ] mut                         at (row=20, col=26-29)
[IDENTIFIER    ] x                           at (row=20, col=30-31)
[SEMICOLON     ] ;                           at (row=20, col=31-32)
[STAR          ] *                           at (row=21, col=1-2)
[IDENTIFIER    ] py                          at (row=21, col=2-4)
[EQUAL         ] =                           at (row=21, col=5-6)
[INT_LITERAL   ] 15            15            at (row=21, col=7-9)
[SEMICOLON     ] ;                           at (row=21, col=9-10)
[PRINT         ] print                       at (row=22, col=1-6)
[STRING_LITERAL] "*py = 15;\n" *py = 15;
    at (row=22, col=7-20)
[SEMICOLON     ] ;                           at (row=22, col=20-21)
[PRINT         ] print                       at (row=23, col=1-6)
[STRING_LITERAL] "[*py, *px, x] = "[*py, *px, x] = at (row=23, col=7-25)
[COMMA         ] ,                           at (row=23, col=25-26)
[STAR          ] *                           at (row=23, col=27-28)
[IDENTIFIER    ] py                          at (row=23, col=28-30)
[COMMA         ] ,                           at (row=23, col=30-31)
[STRING_LITERAL] ", "          ,             at (row=23, col=32-36)
[COMMA         ] ,                           at (row=23, col=36-37)
[STAR          ] *                           at (row=23, col=38-39)
[IDENTIFIER    ] px                          at (row=23, col=39-41)
[COMMA         ] ,                           at (row=23, col=41-42)
[STRING_LITERAL] ", "          ,             at (row=23, col=43-47)
[COMMA         ] ,                           at (row=23, col=47-48)
[IDENTIFIER    ] x                           at (row=23, col=49-50)
[COMMA         ] ,                           at (row=23, col=50-51)
[STRING_LITERAL] "\n"          
             at (row=23, col=52-56)
[SEMICOLON     ] ;                           at (row=23, col=56-57)
[IDENTIFIER    ] px                          at (row=26, col=1-3)
[EQUAL         ] =                           at (row=26, col=4-5)
[NULL_         ] null                        at (row=26, col=6-10)
[SEMICOLON     ] ;                           at (row=26, col=10-11)
[PRINT         ] print                       at (row=27, col=1-6)
[STRING_LITERAL] "Null(addr): "Null(addr):   at (row=27, col=7-21)
[COMMA         ] ,                           at (row=27, col=21-22)
[IDENTIFIER    ] px                          at (row=27, col=23-25)
[COMMA         ] ,                           at (row=27, col=25-26)
[STRING_LITERAL] "\n"          
             at (row=27, col=27-31)
[SEMICOLON     ] ;                           at (row=27, col=31-32)
[IDENTIFIER    ] px                          at (row=28, col=1-3)
[EQUAL         ] =                           at (row=28, col=4-5)
[AMPERSAND     ] &                           at (row=28, col=6-7)
[IDENTIFIER    ] x                           at (row=28, col=7-8)
[SEMICOLON     ] ;                           at (row=28, col=8-9)
[PRINT         ] print                       at (row=29, col=1-6)
[STRING_LITERAL] "Address: "   Address:      at (row=29, col=7-18)
[COMMA         ] ,                           at (row=29, col=18-19)
[IDENTIFIER    ] px                          at (row=29, col=20-22)
[COMMA         ] ,                           at (row=29, col=22-23)
[STRING_LITERAL] "\n"          
             at (row=29, col=24-28)
[SEMICOLON     ] ;                           at (row=29, col=28-29)
[PRINT         ] print                       at (row=30, col=1-6)
[STAR          ] *                           at (row=30, col=7-8)
[IDENTIFIER    ] px                          at (row=30, col=8-10)
[COMMA         ] ,                           at (row=30, col=10-11)
[STRING_LITERAL] "\n"          
             at (row=30, col=12-16)
[SEMICOLON     ] ;                           at (row=30, col=16-17)
[PRINT         ] print                       at (row=31, col=1-6)
[STAR          ] *                           at (row=31, col=7-8)
[LPAREN        ] (                           at (row=31, col=8-9)
[IDENTIFIER    ] px                          at (row=31, col=9-11)
[PLUS          ] +                           at (row=31, col=12-13)
[INT_LITERAL   ] 0             0             at (row=31, col=14-15)
[RPAREN        ] )                           at (row=31, col=15-16)
[COMMA         ] ,                           at (row=31, col=16-17)
[STRING_LITERAL] "\n"          
             at (row=31, col=18-22)
[SEMICOLON     ] ;                           at (row=31, col=22-23)
[PRINT         ] print                       at (row=32, col=1-6)
[IDENTIFIER    ] px                          at (row=32, col=7-9)
[LBRACK        ] [                           at (row=32, col=9-10)
[INT_LITERAL   ] 0             0             at (row=32, col=10-11)
[RBRACK        ] ]                           at (row=32, col=11-12)
[COMMA         ] ,                           at (row=32, col=12-13)
[STRING_LITERAL] "\n"          
             at (row=32, col=14-18)
[SEMICOLON     ] ;                           at (row=32, col=18-19)
[FUNC          ] func                        at (row=35, col=1-5)
[IDENTIFIER    ] print_arr                   at (row=35, col=6-15)
[LPAREN        ] (                           at (row=35, col=15-16)
[IDENTIFIER    ] p                           at (row=35, col=16-17)
[COLON         ] :                           at (row=35, col=18-19)
[PTR           ] ptr                         at (row=35, col=20-23)
[LANGLE        ] <                           at (row=35, col=23-24)
[IMM           ] imm                         at (row=35, col=24-27)
[I64           ] i64                         at (row=35, col=28-31)
[RANGLE        ] >                           at (row=35, col=31-32)
[COMMA         ] ,                           at (row=35, col=32-33)
[IDENTIFIER    ] size                        at (row=35, col=34-38)
[COLON         ] :                           at (row=35, col=38-39)
[I64           ] i64                         at (row=35, col=40-43)
[RPAREN        ] )                           at (row=35, col=43-44)
[LBRACE        ] {                           at (row=35, col=45-46)
[FOR           ] for                         at (row=36, col=3-6)
[LPAREN        ] (                           at (row=36, col=7-8)
[MUT           ] mut                         at (row=36, col=8-11)
[IDENTIFIER    ] i                           at (row=36, col=12-13)
[COLON         ] :                           at (row=36, col=13-14)
[I64           ] i64                         at (row=36, col=15-18)
[SEMICOLON     ] ;                           at (row=36, col=18-19)
[IDENTIFIER    ] i                           at (row=36, col=20-21)
[LANGLE        ] <                           at (row=36, col=22-23)
[IDENTIFIER    ] size                        at (row=36, col=24-28)
[SEMICOLON     ] ;                           at (row=36, col=28-29)
[IDENTIFIER    ] i                           at (row=36, col=30-31)
[EQUAL         ] =                           at (row=36, col=32-33)
[IDENTIFIER    ] i                           at (row=36, col=34-35)
[PLUS          ] +                           at (row=36, col=36-37)
[INT_LITERAL   ] 1             1             at (row=36, col=38-39)
[RPAREN        ] )                           at (row=36, col=39-40)
[LBRACE        ] {                           at (row=36, col=41-42)
[PRINT         ] print                       at (row=37, col=5-10)
[IDENTIFIER    ] p                           at (row=37, col=11-12)
[LBRACK        ] [                           at (row=37, col=12-13)
[IDENTIFIER    ] i                           at (row=37, col=13-14)
[RBRACK        ] ]                           at (row=37, col=14-15)
[COMMA         ] ,                           at (row=37, col=15-16)
[STRING_LITERAL] "\n"          
             at (row=37, col=17-21)
[SEMICOLON     ] ;                           at (row=37, col=21-22)
[RBRACE        ] }                           at (row=38, col=3-4)
[RBRACE        ] }                           at (row=39, col=1-2)
[MUT           ] mut                         at (row=40, col=1-4)
[IDENTIFIER    ] pz                          at (row=40, col=5-7)
[COLON         ] :                           at (row=40, col=8-9)
[PTR           ] ptr                         at (row=40, col=10-13)
[LANGLE        ] <                           at (row=40, col=13-14)
[IMM           ] imm                         at (row=40, col=14-17)
[I64           ] i64                         at (row=40, col=18-21)
[RANGLE        ] >                           at (row=40, col=21-22)
[SEMICOLON     ] ;                           at (row=40, col=22-23)
[IDENTIFIER    ] pz                          at (row=42, col=1-3)
[EQUAL         ] =                           at (row=42, col=4-5)
[NEW           ] new                         at (row=42, col=6-9)
[LANGLE        ] <                           at (row=42, col=9-10)
[MUT           ] mut                         at (row=42, col=10-13)
[I64           ] i64                         at (row=42, col=14-17)
[RANGLE        ] >                           at (row=42, col=17-18)
[LBRACK        ] [                           at (row=42, col=18-19)
[INT_LITERAL   ] 3             3             at (row=42, col=19-20)
[RBRACK        ] ]                           at (row=42, col=20-21)
[SEMICOLON     ] ;                           at (row=42, col=21-22)
[IDENTIFIER    ] pz                          at (row=43, col=1-3)
[LBRACK        ] [                           at (row=43, col=3-4)
[INT_LITERAL   ] 0             0             at (row=43, col=4-5)
[RBRACK        ] ]                           at (row=43, col=5-6)
[EQUAL         ] =                           at (row=43, col=7-8)
[INT_LITERAL   ] 30            30            at (row=43, col=9-11)
[SEMICOLON     ] ;                           at (row=43, col=11-12)
[IDENTIFIER    ] pz                          at (row=44, col=1-3)
[LBRACK        ] [                           at (row=44, col=3-4)
[INT_LITERAL   ] 1             1             at (row=44, col=4-5)
[RBRACK        ] ]                           at (row=44, col=5-6)
[EQUAL         ] =                           at (row=44, col=7-8)
[INT_LITERAL   ] 60            60            at (row=44, col=9-11)
[SEMICOLON     ] ;                           at (row=44, col=11-12)
[IDENTIFIER    ] pz                          at (row=45, col=1-3)
[LBRACK        ] [                           at (row=45, col=3-4)
[INT_LITERAL   ] 2             2             at (row=45, col=4-5)
[RBRACK        ] ]                           at (row=45, col=5-6)
[EQUAL         ] =                           at (row=45, col=7-8)
[INT_LITERAL   ] 90            90            at (row=45, col=9-11)
[SEMICOLON     ] ;                           at (row=45, col=11-12)
[IDENTIFIER    ] print_arr                   at (row=46, col=1-10)
[LPAREN        ] (                           at (row=46, col=10-11)
[IDENTIFIER    ] pz                          at (row=46, col=11-13)
[COMMA         ] ,                           at (row=46, col=13-14)
[INT_LITERAL   ] 3             3             at (row=46, col=15-16)
[RPAREN        ] )                           at (row=46, col=16-17)
[SEMICOLON     ] ;                           at (row=46, col=17-18)
[FREE          ] free                        at (row=47, col=1-5)
[LBRACK        ] [                           at (row=47, col=5-6)
[RBRACK        ] ]                           at (row=47, col=6-7)
[IDENTIFIER    ] pz                          at (row=47, col=8-10)
[SEMICOLON     ] ;                           at (row=47, col=10-11)
[IDENTIFIER    ] pz                          at (row=49, col=1-3)
[EQUAL         ] =                           at (row=49, col=4-5)
[NULL_         ] null                        at (row=49, col=6-10)
[SEMICOLON     ] ;                           at (row=49, col=10-11)
[IDENTIFIER    ] pz                          at (row=50, col=1-3)
[EQUAL         ] =                           at (row=50, col=4-5)
[NEW           ] new                         at (row=50, col=6-9)
[LANGLE        ] <                           at (row=50, col=9-10)
[IMM           ] imm                         at (row=50, col=10-13)
[I64           ] i64                         at (row=50, col=14-17)
[RANGLE        ] >                           at (row=50, col=17-18)
[LPAREN        ] (                           at (row=50, col=18-19)
[INT_LITERAL   ] 32            32            at (row=50, col=19-21)
[RPAREN        ] )                           at (row=50, col=21-22)
[SEMICOLON     ] ;                           at (row=50, col=22-23)
[IDENTIFIER    ] print_arr                   at (row=51, col=1-10)
[LPAREN        ] (                           at (row=51, col=10-11)
[IDENTIFIER    ] pz                          at (row=51, col=11-13)
[COMMA         ] ,                           at (row=51, col=13-14)
[INT_LITERAL   ] 1             1             at (row=51, col=15-16)
[RPAREN        ] )                           at (row=51, col=16-17)
[SEMICOLON     ] ;                           at (row=51, col=17-18)
[FREE          ] free                        at (row=52, col=1-5)
[IDENTIFIER    ] pz                          at (row=52, col=6-8)
[SEMICOLON     ] ;                           at (row=52, col=8-9)
