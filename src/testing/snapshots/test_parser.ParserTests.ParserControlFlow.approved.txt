IfStmt(
  Condition:
    Ident(condition),
  ThenBranch:
  Block([
  ]),
  ElseBranch:
  Block([
  ])
)
ForStmt(
  Initializer:
    VariableDecl(Mutable: true,
      Name:
        Ident(i),
      Type: inferred
      Initializer:
        Int(0)
    ),
  Condition:
    BinaryOp(<,
      Ident(i),
      Int(10)
    ),
  Iteration:
    Assignment(
      LValue:
        Ident(i),
      RValue:
        BinaryOp(+,
          Ident(i),
          Int(1)
        )
    ),
  Body:
  Block([
    IfStmt(
      Condition:
        BinaryOp(!=,
          Ident(i),
          Int(5)
        ),
      ThenBranch:
      Block([
        VariableDecl(Mutable: false,
          Name:
            Ident(z),
          Type: inferred
          Initializer:
            Int(1)
        ),
        ContinueStmt
      ])
    ),
    VariableDecl(Mutable: false,
      Name:
        Ident(y),
      Type: inferred
      Initializer:
        Int(9)
    ),
    BreakStmt
  ])
)
WhileStmt(
  Condition:
    Int(1),
  Body:
  Block([
    VariableDecl(Mutable: false,
      Name:
        Ident(z),
      Type: inferred
      Initializer:
        Int(3)
    ),
    VariableDecl(Mutable: false,
      Name:
        Ident(y),
      Type:
        {i32} Type::Named(i32)
      Initializer:
        Ident(z)
    )
  ])
)
VariableDecl(Mutable: true,
  Name:
    Ident(x),
  Type:
    {i32} Type::Named(i32)
  Initializer:
    Int(5)
)
SwitchStmt(
  Expression:
    Ident(x),
  Cases: [
    Case(
      Value:
        Int(3),
      Body:
      Block([
        VariableDecl(Mutable: false,
          Name:
            Ident(z),
          Type: inferred
          Initializer:
            Int(2)
        ),
        PrintStmt(
          Ident(x)
        )
      ])
    )
  ]
)
Block([
  VariableDecl(Mutable: true,
    Name:
      Ident(x),
    Type: inferred
    Initializer:
      Int(3)
  )
])
