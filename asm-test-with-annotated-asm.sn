func main() {
  mut a : i32;
  a = 2 + a;
  a = 3;
  print a;
  print "\n";

  b : string = "hi";
  print b;
  print "\n";
}

/*
section .data
LC0:
	db 10, 0
LC1:
	db "hi", 0

global _start
section .text
_start:
	call main
	mov rdi, rax
	call exit
main:
	push rbp
	mov rbp, rsp
	sub rsp, 16 ; function preamble with calculated required stack size

	mov r10, 0 ; default initialization
	mov [rbp - 4], r10 ; store the value of 'a' within -8, note that 'a' is an i32 which is 4 bytes
	mov r11, 2 ; tmp for immediate 2

	mov rbx, r11
	add rbx, [rbp - 4] ; add '2 + a'

	mov [rbp - 4], rbx ; store result in 'a'

	mov r12, 3
	mov [rbp - 4], r12 ; 'a = 3'

	mov rdi, [rbp - 4]
	call print_int ; setup 'a' as print arg and print

	mov r13, LC0 ; assignment to string
	mov rdi, r13 ; pushed as argument
	call print_string ; syscall

	mov r14, LC1
	mov [rbp - 16], r14 ; store string in 'b'
	mov rdi, [rbp - 16] ; push as arg
	call print_string ; syscall

	mov r15, LC0
	mov rdi, r15
	call print_string

	xor rax, rax ; return zero for void
	mov rsp, rbp ; restore stack
	pop rbp
	ret
*/
