func merge_sort(arr: ptr<mut i64>, left: i64, right: i64) {
  if (left < right) {
    mid := left + (right - left) / 2;

    merge_sort(arr, left, mid);
    merge_sort(arr, mid + 1, right);

    merge(arr, left, mid, right);
  }
}

// merge two halves into a sorted array
func merge(arr: ptr<mut i64>, left: i64, mid: i64, right: i64) {
  size_L := mid - left + 1;
  size_R := right - mid;
  L := new<mut i64>[size_L];
  R := new<mut i64>[size_R];

  for (mut i := 0; i < size_L; i = i + 1) {
    L[i] = arr[left + i];
  }

  for (mut i := 0; i < size_R; i = i + 1) {
    R[i] = arr[mid + i + 1];
  }

  // merge them into arr[left..right]
  mut i := 0;
  mut j := 0;
  mut k := left;
  while (i < size_L and j < size_R) {
    if (L[i] <= R[j]) {
      arr[k] = L[i]; i = i + 1;
    } else {
      arr[k] = R[j]; j = j + 1;
    }
    k = k + 1;
  }

  // extend remaining content
  while (i < size_L)  {
    arr[k] = L[i]; k = k + 1; i = i + 1;
  }
  while (j < size_R) {
    arr[k] = R[j]; k = k + 1; j = j + 1;
  }

  free[] L;
  free[] R;
}

func print_arr(p: ptr<mut i64>, size: i64) {
  for (mut i := 0; i < size; i = i + 1) {
    print p[i];
    if (i != size - 1) {
      print ", ";
    } else {
      print "\n";
    }
  }
}

// driver code:
size_arr := 12;
arr : ptr<mut i64> = new<mut i64>[size_arr];
arr[0] = 3;
arr[1] = 25;
arr[2] = 0;
arr[3] = 13;
arr[4] = 17;
arr[5] = 4;
arr[6] = 21;
arr[7] = 5;
arr[8] = 22;
arr[9] = 7;
arr[10] = 14;
arr[11] = 9;

print "Original a: "; print_arr(arr, size_arr);
merge_sort(arr, 0, 11);
print "Sorted arr: "; print_arr(arr, size_arr);
