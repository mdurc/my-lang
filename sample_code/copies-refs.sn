struct Point {
  x : i64,
  y : i64
}

func foo(p : ptr<mut Point>) {
  print "foo(ptr point):\n";
  *p = Point{x = 2, y = 15};
  print "  created new point and put in *ptr: ";
  print "(*p).x: ", (*p).x, ", (*p).y: ", (*p).y, "\n";
  (*p).x = 3;
  print "  modified (*p).x: ", (*p).x, "\n";
}

mut a : Point;
foo(&mut a);
print "foo(&mut a) yields -> a.x: ", a.x, ", a.y: ", a.y, "\n\n";


func bar(take mut p: Point) {
  p.x = 36;
  p.y = 19;
  print "bar(ref point):\n  set p.x to ", p.x, " and p.y to ", p.y, "\n";
}

mut b : Point = Point{x=0, y=0};
bar(b);
print "bar(b) where b is a Point{0,0} yields -> b.x: ", b.x, ", b.y: ", b.y, "\n\n";


// string argument passing with copies vs references
func foo_str(take mut s : string) {
  s[0] = 'a';
  print "took the string and modified it to: ", s, "\n";
}

mut h := "hi";
foo_str(give h);
print "gave the string and after it is still: ", h, "\n";
h[1] = 'b';
print "modified string h[1] = 'b': ", h, "\n\n";


print "Final:\n", a.x, "\n", a.y, "\n", b.x, "\n", b.y, "\n", h, "\n";
