struct Point {
    x: i64,
    y: i64
}

struct Rectangle {
    origin: Point,
    width: i64,
    height: i64
}

// Test basic struct literal and field access
print "Testing struct literal field access:\n";
print Point{x = 5, y = 2}.x, "\n";  // should print 5
print Point{x = 5, y = 2}.y, "\n";  // should print 2

// Test local variable with struct
print "\nTesting local variable field access:\n";
mut origin := Point{x = 10, y = 20};
print origin.x, "\n";  // should print 10
print origin.y, "\n";  // should print 20

// Test struct field assignment
print "\nTesting struct field assignment:\n";
origin.x = 30;
origin.y = 40;
print origin.x, "\n";  // should print 30
print origin.y, "\n";  // should print 40

// BREAKs

// Test nested struct access
print "\nTesting nested struct access:\n";
mut rect := Rectangle{origin = Point{x = 1, y = 2}, width = 100, height = 200};
print rect.origin.x, "\n";  // should print 1
print rect.origin.y, "\n";  // should print 2
print rect.width, "\n";     // should print 100
print rect.height, "\n";    // should print 200

// Test nested struct assignment
print "\nTesting nested struct assignment:\n";
rect.origin.x = 3;
rect.origin.y = 4;
rect.width = 150;
rect.height = 250;
print rect.origin.x, "\n";  // should print 3
print rect.origin.y, "\n";  // should print 4
print rect.width, "\n";     // should print 150
print rect.height, "\n";    // should print 250

// Test multiple struct instances
print "\nTesting multiple struct instances:\n";
mut p1 := Point{x = 1, y = 1};
mut p2 := Point{x = 2, y = 2};
print p1.x, " ", p1.y, "\n";  // should print 1 1
print p2.x, " ", p2.y, "\n";  // should print 2 2

// Test struct literal in expressions
print "\nTesting struct literal in expressions:\n";
mut p3 := Point{x = p1.x + p2.x, y = p1.y + p2.y};
print p3.x, " ", p3.y, "\n";  // should print 3 3

// Test struct field access in expressions
print "\nTesting struct field access in expressions:\n";
p3.x = p1.x * p2.x;
p3.y = p1.y * p2.y;
print p3.x, " ", p3.y, "\n";  // should print 2 2
