mut WIDTH: i64 = 0;
mut HEIGHT: i64 = 0;
mut SIZE: i64 = 0;

func delay(ticks: i64) {
  mut i: i64 = 0;
  while (i < ticks) {
    i = i + 1;
  }
}

func idx(x: i64, y: i64) returns (r: i64) {
  return y * WIDTH + x;
}

func print_grid(grid: ptr<mut i64>) {
  print "+";
  for (mut x: i64 = 0; x < WIDTH; x = x + 1) {
    print "-";
  }
  print "+\n";

  for (mut y: i64 = 0; y < HEIGHT; y = y + 1) {
    print "|";
    for (mut x: i64 = 0; x < WIDTH; x = x + 1) {
      mut val: i64 = grid[idx(x, y)];
      if (val == 1) {
        print "@";
      } else {
        print " ";
      }
    }
    print "|\n";
  }

  print "+";
  for (mut x: i64 = 0; x < WIDTH; x = x + 1) {
    print "-";
  }
  print "+\n";
}

func count_neighbors(grid: ptr<mut i64>, x: i64, y: i64) returns (r: i64) {
  mut count: i64 = 0;
  for (mut dy: i64 = -1; dy <= 1; dy = dy + 1) {
    for (mut dx: i64 = -1; dx <= 1; dx = dx + 1) {
      if (dx == 0 and dy == 0) {
        continue;
      }
      mut nx: i64 = x + dx;
      mut ny: i64 = y + dy;
      if (nx >= 0 and ny >= 0 and nx < WIDTH and ny < HEIGHT) {
        count = count + grid[idx(nx, ny)];
      }
    }
  }
  return count;
}

func step(current: ptr<mut i64>, mut next: ptr<mut i64>) {
  for (mut y: i64 = 0; y < HEIGHT; y = y + 1) {
    for (mut x: i64 = 0; x < WIDTH; x = x + 1) {
      mut i: i64 = idx(x, y);
      mut alive: i64 = current[i];
      mut neighbors: i64 = count_neighbors(current, x, y);
      if (alive == 1 and (neighbors == 2 or neighbors == 3)) {
        next[i] = 1;
      } else if (alive == 0 and neighbors == 3) {
        next[i] = 1;
      } else {
        next[i] = 0;
      }
    }
  }
}

func main() {
  print "Width: ";
  read WIDTH;
  print "Height: ";
  read HEIGHT;
  SIZE = WIDTH * HEIGHT;

  print SIZE, "\n";

  mut grid_a: ptr<mut i64> = new<mut i64>[SIZE];
  mut grid_b: ptr<mut i64> = new<mut i64>[SIZE];

  for (mut y: i64 = 0; y < HEIGHT; y = y + 1) {
    for (mut x: i64 = 0; x < WIDTH; x = x + 1) {
      mut cell: string;
      read cell;
      next_idx : i64 = idx(x,y);
      if (cell == "@" or cell == "*") {
        grid_a[next_idx] = 1;
      } else {
        grid_a[next_idx] = 0;
      }
    }
  }

  mut current: ptr<mut i64> = grid_a;
  mut next: ptr<mut i64> = grid_b;

  for (mut gen: i64 = 0; gen < 500; gen = gen + 1) {
    asm { call clrscr };
    print "Generation ", gen, "\n";
    print_grid(current);

    step(current, next);

    mut temp: ptr<mut i64> = current;
    current = next;
    next = temp;

    del_time : i64 = 35000000;
    delay(del_time);
  }

  free[] grid_a;
  free[] grid_b;
}
