Symbol Table design notes:

i32 x;
u8 y;
{
  struct MyStruct {}
  MyStruct z;
}


Scopes      : [ 0, 1 ]
Types       : [ (i32, 0), (u8, 0), (MyStruct, 1) ]
Variables   : [ (x, 0), (y, 0), (z, 1) ]


Lookup type from string "MyStruct":
- I am in scope 1
- Iterate through Types and match the type name

Lookup variable from string "z":
- I am in scope 1
- Iterate through variables and match for name

Both lookups are Theta(n)
Both insertions are O(1)


==
Scopes : [ {T: i32, u8 ; V: x, y}, {T: MyStruct ; V: z} ]

Lookup type from string "MyStruct":
- I am in scope 1
- Go to scope one {T: MyStruct ; V: z}
- Iterate through types and compare, if it doesn't exist, go to the parent

Lookup variable from string "z":
- I am in scope 1
- Go to scope one {T: MyStruct ; V: z}
- Iterate through declared variables in scope 1 and match by name

Common case is faster during lookup O(n)
Insertion still O(1)


Grammar notes:
- Statements do not exist on rhs

Scoping Rules:
- Functions
  - Parameters and block all in the same scope
- Blocks
  - Scoped in everything except when attached to function
- For/While loops
  - Parameter scopes with inner block scope
- Struct
  - field scopes
  - Literal arguments scope


- Symbol Table Snapshot Testing
- Should I remove all optionals and instead use U0_TYPE? This way type inferring will have a type, and it will actually be associated to a type.
  - I should be associating NullLiteralNode type to U0_TYPE

Type checker:
- Identifiers are expressions, thus they have a resolved type
- Variable declarations have a type as a part of the Node, thus the identifier's resolved type will equal that one.
  - Note that we can set that resolved type to that identifier, but what is stored in the symbol table is a 'Variable', thus we have to mark that one as well, so that when we reach an identifier we can access the resolved type from the symtab


== TODO ==
- Decide on how struct/field mutability should work and what it should look like syntactically
- Decide on x86 asm representations:
1. When spilling occurs or variables are used, they must be pushed to the stack. When this happens, we must know how many bytes this data takes up.
- I need to clarify how data will be stored within the assembly.
  - Integers/Bools are fairly clear.
  - Floats are unclear.
  - Strings: mutable/immutable, do we just store in the .data segment, do we allocate 8 bytes on the stack to store a label to a string, or do we store length(str) bytes when we need to put it on the stack. Will we allow for indexing through strings, if so, how and will strings decay into pointers and should they act as beautified pointers within the language itself as well, or should that simply be under-the-hood during assembly code generation?
  - Structs are unclear regarding the group association of data. Member functions are added complexity regarding understanding the total size of the struct, and useability.
  - Functions seem to be clear, though we need a way to pre/post process the amount of bytes needed on the stack so that we can account for it in the function preamble (this also is necessary when we don't have a main function and we simply have _start).
  - Pointers are unclear though may be quite simple. How are they represented? It seems like they can simply be 8 byte values that equal the base pointer plus some defined offset?
