<Program>               ::= ( <StructDecl> | <FunctionDecl> | <Stmt> )*

<StructDecl>            ::= 'struct' Identifier '{' <StructMembers>? '}'
<StructMembers>         ::= <StructMember> ( ',' <StructMember> )*
<StructMember>          ::= <StructField>  | <FunctionDecl>
<StructField>           ::= Identifier ':' <Type>

<FunctionDecl>          ::= 'func' Identifier '(' <Params>? ')' <ReturnType>? <Block>
<Params>                ::= <Param> ( ',' <Param> )*
<Param>                 ::= <FunctionParamPrefix>? Identifier ':' <Type>
<ReturnType>            ::= 'returns' '(' Identifier ':' <Type> ')'

<Block>                 ::= '{' <Stmt>* '}'

<Stmt>                  ::= <VarDecl> ';'
                          | <IfStmt>
                          | <ForStmt>
                          | <WhileStmt>
                          | <SwitchStmt>
                          | 'print' <Expr> ';'
                          | <Block>
                          | <Expr> ';'
                          | <ReturnStmt> ';'
                          | <BreakStmt> ';'
                          | <ContinueStmt> ';'
                          | <FreeStmt> ';'
                          | <ErrorStmt> ';'
                          | 'asm' <Block> ';'

<VarDecl>               ::= <TypePrefix>? Identifier ( ( ':' <Type> ( '=' <Expr> )? ) | ( ':=' <Expr> ) )

<IfStmt>                ::= 'if' '(' <Expr> ')' <Block> ( 'else' ( <Block> | <IfStmt> ) )?
<ForStmt>               ::= 'for' '(' <Expr>? ';' <Expr>? ';' <Expr>? ')' <Block>
<WhileStmt>             ::= 'while' '(' <Expr> ')' <Block>
<SwitchStmt>            ::= 'switch' '(' <Expr> ')' '{' <Case>* '}'
<Case>                  ::= 'case' <Expr> ':' <Block> | 'default' ':' <Block>

<ReturnStmt>            ::= 'return' <Expr>?
<BreakStmt>             ::= 'break'
<ContinueStmt>          ::= 'continue'
<FreeStmt>              ::= 'free' '[]'? <Expr>
<ErrorStmt>             ::= 'Error' '(' String ')'

<Expr>                  ::= <AssignmentExpr>
<AssignmentExpr>        ::= <LogicalOrExpr> ( '=' <AssignmentExpr> )?
<LogicalOrExpr>         ::= <LogicalAndExpr> ( 'or' <LogicalAndExpr> )*
<LogicalAndExpr>        ::= <EqualityExpr> ( 'and' <EqualityExpr> )*
<EqualityExpr>          ::= <RelationalExpr> ( ( '==' | '!=' ) <RelationalExpr> )*
<RelationalExpr>        ::= <AdditiveExpr> ( ( '<' | '>' | '<=' | '>=' ) <AdditiveExpr> )*
<AdditiveExpr>          ::= <MultiplicativeExpr> ( ( '+' | '-') <MultiplicativeExpr> )*
<MultiplicativeExpr>    ::= <UnaryExpr> ( ( '*' | '/' | '%' ) <UnaryExpr> )*
<UnaryExpr>             ::= ( '&' <TypePrefix>? | '*' | '!' ) <UnaryExpr> | <PostfixExpr>
<PostfixExpr>           ::= <PrimaryExpr> ( <PostfixSuffix> )*
<PostfixSuffix>         ::= '.' Identifier | '(' <Args>? ')' | '[' <Expr> ']'

<PrimaryExpr>           ::= <PrimitiveLiteral>
                          | Identifier
                          | '(' <Expr> ')'
                          | <StructLiteral>
                          | <NewExpr>

<PrimitiveLiteral>      ::= Integer | Float | String | Bool | 'null'

<StructLiteral>         ::= Identifier '(' ( Identifier '=' <Expr> ( ',' Identifier '=' <Expr> )* )? ')'
<NewExpr>               ::= 'new' '<' <TypePrefix>? <Type> '>' ( '[' <Expr> ']' | '(' (<StructLiteral> | <Expr>)? ')' )

<Args>                  ::= <Arg> ( ',' <Arg> )*
<Arg>                   ::= 'give'? <Expr>

<Type>                  ::= <BasicType> | <StructType> | <PointerType> | <FunctionType>
<BasicType>             ::= 'i32' | 'u8' | 'String' | 'bool' | 'u0' | 'u16' | 'u32' | 'u64' | 'i8' | 'i16' | 'i64' | 'f64'
<StructType>            ::= Identifier
<PointerType>           ::= 'ptr' '<' <TypePrefix>? <Type> '>'

<FunctionType>          ::= 'func' '(' (<Type> ( ',' <Type> )*)? ')' '->' <Type>

<TypePrefix>            ::= 'mut' | 'imm'
<FunctionParamPrefix>   ::= 'mut' | 'imm' | 'take' <TypePrefix>?

Integer                 ::= [0-9]+
Float                   ::= [0-9]+ '.' [0-9]+
String                  ::= '"' ( Escape | [^"] )* '"'
Bool                    ::= 'true' | 'false'
